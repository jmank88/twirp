// Code generated by protoc-gen-twirp v5.1.0, DO NOT EDIT.
// source: service.proto

/*
Package example is a generated twirp stub package.
This code was generated with github.com/twitchtv/twirp/protoc-gen-twirp v5.1.0.

It is generated from these files:
	service.proto
*/
package example

import bytes "bytes"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"
import strings "strings"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// =====================
// Haberdasher Interface
// =====================

// A Haberdasher makes hats for clients.
type Haberdasher interface {
	// MakeHat produces a hat of mysterious, randomly-selected color!
	MakeHat(context.Context, *Size) (*Hat, error)
}

// ===========================
// Haberdasher Protobuf Client
// ===========================

type haberdasherProtobufClient struct {
	client twirp.HTTPClient
	urls   [1]string
}

// NewHaberdasherProtobufClient creates a Protobuf client that implements the Haberdasher interface.
// It communicates using Protobuf and can be configured with a custom twirp.HTTPClient.
func NewHaberdasherProtobufClient(addr string, client twirp.HTTPClient) Haberdasher {
	prefix := twirp.URLBase(addr) + HaberdasherPathPrefix
	urls := [1]string{
		prefix + "MakeHat",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &haberdasherProtobufClient{
			client: twirp.WithoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &haberdasherProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *haberdasherProtobufClient) MakeHat(ctx context.Context, in *Size) (*Hat, error) {
	out := new(Hat)
	err := twirp.DoProtobufRequest(ctx, c.client, c.urls[0], in, out)
	return out, err
}

// =======================
// Haberdasher JSON Client
// =======================

type haberdasherJSONClient struct {
	client twirp.HTTPClient
	urls   [1]string
}

// NewHaberdasherJSONClient creates a JSON client that implements the Haberdasher interface.
// It communicates using JSON and can be configured with a custom twirp.HTTPClient.
func NewHaberdasherJSONClient(addr string, client twirp.HTTPClient) Haberdasher {
	prefix := twirp.URLBase(addr) + HaberdasherPathPrefix
	urls := [1]string{
		prefix + "MakeHat",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &haberdasherJSONClient{
			client: twirp.WithoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &haberdasherJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *haberdasherJSONClient) MakeHat(ctx context.Context, in *Size) (*Hat, error) {
	out := new(Hat)
	err := twirp.DoJSONRequest(ctx, c.client, c.urls[0], in, out)
	return out, err
}

// ==========================
// Haberdasher Server Handler
// ==========================

type haberdasherServer struct {
	Haberdasher
	*twirp.ServerHooks
}

func NewHaberdasherServer(svc Haberdasher, hooks *twirp.ServerHooks) twirp.Server {
	return &haberdasherServer{
		Haberdasher: svc,
		ServerHooks: hooks,
	}
}

// HaberdasherPathPrefix is used for all URL paths on a twirp Haberdasher server.
// Requests are always: POST HaberdasherPathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const HaberdasherPathPrefix = "/twirp/twitch.twirp.example.Haberdasher/"

func (s *haberdasherServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "twitch.twirp.example")
	ctx = ctxsetters.WithServiceName(ctx, "Haberdasher")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = s.CallRequestReceived(ctx)
	if err != nil {
		s.WriteError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = twirp.BadRouteError(msg, req.Method, req.URL.Path)
		s.WriteError(ctx, resp, err)
		return
	}

	if strings.HasPrefix(req.URL.Path, HaberdasherPathPrefix) {
		switch req.URL.Path[len(HaberdasherPathPrefix):] {
		case "MakeHat":
			s.serveMakeHat(ctx, resp, req)
			return
		}
	}
	msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
	err = twirp.BadRouteError(msg, req.Method, req.URL.Path)
	s.WriteError(ctx, resp, err)
	return
}

func (s *haberdasherServer) serveMakeHat(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	switch req.Header.Get("Content-Type") {
	case "application/json":
		s.serveMakeHatJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveMakeHatProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := twirp.BadRouteError(msg, req.Method, req.URL.Path)
		s.WriteError(ctx, resp, twerr)
	}
}

func (s *haberdasherServer) serveMakeHatJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "MakeHat")
	ctx, err = s.CallRequestRouted(ctx)
	if err != nil {
		s.WriteError(ctx, resp, err)
		return
	}

	defer func() {
		if err := req.Body.Close(); err != nil {
			s.Printf("error closing body: %q", err)
		}
	}()
	reqContent := new(Size)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = twirp.WrapErr(err, "failed to parse request json")
		s.WriteError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *Hat
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.WriteError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.MakeHat(ctx, reqContent)
	}()

	if err != nil {
		s.WriteError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.WriteError(ctx, resp, twirp.InternalError("received a nil *Hat and nil error while calling MakeHat. nil responses are not supported"))
		return
	}

	ctx = s.CallResponsePrepared(ctx)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = twirp.WrapErr(err, "failed to marshal json response")
		s.WriteError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)
	if _, err = resp.Write(buf.Bytes()); err != nil {
		s.Printf("errored while writing response to client, but already sent response status code to 200: %s", err)
	}
	s.CallResponseSent(ctx)
}

func (s *haberdasherServer) serveMakeHatProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "MakeHat")
	ctx, err = s.CallRequestRouted(ctx)
	if err != nil {
		s.WriteError(ctx, resp, err)
		return
	}

	defer func() {
		if err := req.Body.Close(); err != nil {
			s.Printf("error closing body: %q", err)
		}
	}()
	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = twirp.WrapErr(err, "failed to read request body")
		s.WriteError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(Size)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = twirp.WrapErr(err, "failed to parse request proto")
		s.WriteError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *Hat
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.WriteError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.MakeHat(ctx, reqContent)
	}()

	if err != nil {
		s.WriteError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.WriteError(ctx, resp, twirp.InternalError("received a nil *Hat and nil error while calling MakeHat. nil responses are not supported"))
		return
	}

	ctx = s.CallResponsePrepared(ctx)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = twirp.WrapErr(err, "failed to marshal proto response")
		s.WriteError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if _, err = resp.Write(respBytes); err != nil {
		s.Printf("errored while writing response to client, but already sent response status code to 200: %s", err)
	}
	s.CallResponseSent(ctx)
}

func (s *haberdasherServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 0
}

func (s *haberdasherServer) ProtocGenTwirpVersion() string {
	return "v5.1.0"
}

var twirpFileDescriptor0 = []byte{
	// 185 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x29, 0x29, 0xcf, 0x2c, 0x49,
	0xce, 0xd0, 0x2b, 0x29, 0xcf, 0x2c, 0x2a, 0xd0, 0x4b, 0xad, 0x48, 0xcc, 0x2d, 0xc8, 0x49, 0x55,
	0x72, 0xe6, 0x62, 0xf6, 0x48, 0x2c, 0x11, 0x12, 0xe2, 0x62, 0x29, 0xce, 0xac, 0x4a, 0x95, 0x60,
	0x54, 0x60, 0xd4, 0x60, 0x0d, 0x02, 0xb3, 0x85, 0x44, 0xb8, 0x58, 0x93, 0xf3, 0x73, 0xf2, 0x8b,
	0x24, 0x98, 0x14, 0x18, 0x35, 0x38, 0x83, 0x20, 0x1c, 0x90, 0xca, 0xbc, 0xc4, 0xdc, 0x54, 0x09,
	0x66, 0xb0, 0x20, 0x98, 0xad, 0x24, 0xc7, 0xc5, 0x12, 0x0c, 0xd2, 0x21, 0xc6, 0xc5, 0x96, 0x99,
	0x97, 0x9c, 0x91, 0x5a, 0x0c, 0x35, 0x07, 0xca, 0x33, 0xf2, 0xe7, 0xe2, 0xf6, 0x48, 0x4c, 0x4a,
	0x2d, 0x4a, 0x49, 0x2c, 0xce, 0x48, 0x2d, 0x12, 0x72, 0xe0, 0x62, 0xf7, 0x4d, 0xcc, 0x4e, 0x05,
	0xd9, 0x2b, 0xa5, 0x87, 0xcd, 0x55, 0x7a, 0x20, 0xd3, 0xa4, 0x24, 0xb1, 0xcb, 0x79, 0x24, 0x96,
	0x38, 0x71, 0x46, 0xb1, 0x43, 0xb9, 0x49, 0x6c, 0x60, 0xdf, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x8a, 0xbb, 0x3b, 0x6a, 0xee, 0x00, 0x00, 0x00,
}
