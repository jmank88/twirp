// Code generated by protoc-gen-twirp v5.1.0, DO NOT EDIT.
// source: clientcompat.proto

/*
Package clientcompat is a generated twirp stub package.
This code was generated with github.com/twitchtv/twirp/protoc-gen-twirp v5.1.0.

It is generated from these files:
	clientcompat.proto
*/
package clientcompat

import bytes "bytes"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"
import strings "strings"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// =======================
// CompatService Interface
// =======================

type CompatService interface {
	Method(context.Context, *Req) (*Resp, error)

	NoopMethod(context.Context, *Empty) (*Empty, error)
}

// =============================
// CompatService Protobuf Client
// =============================

type compatServiceProtobufClient struct {
	client twirp.HTTPClient
	urls   [2]string
}

// NewCompatServiceProtobufClient creates a Protobuf client that implements the CompatService interface.
// It communicates using Protobuf and can be configured with a custom twirp.HTTPClient.
func NewCompatServiceProtobufClient(addr string, client twirp.HTTPClient) CompatService {
	prefix := twirp.URLBase(addr) + CompatServicePathPrefix
	urls := [2]string{
		prefix + "Method",
		prefix + "NoopMethod",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &compatServiceProtobufClient{
			client: twirp.WithoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &compatServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *compatServiceProtobufClient) Method(ctx context.Context, in *Req) (*Resp, error) {
	out := new(Resp)
	err := twirp.DoProtobufRequest(ctx, c.client, c.urls[0], in, out)
	return out, err
}

func (c *compatServiceProtobufClient) NoopMethod(ctx context.Context, in *Empty) (*Empty, error) {
	out := new(Empty)
	err := twirp.DoProtobufRequest(ctx, c.client, c.urls[1], in, out)
	return out, err
}

// =========================
// CompatService JSON Client
// =========================

type compatServiceJSONClient struct {
	client twirp.HTTPClient
	urls   [2]string
}

// NewCompatServiceJSONClient creates a JSON client that implements the CompatService interface.
// It communicates using JSON and can be configured with a custom twirp.HTTPClient.
func NewCompatServiceJSONClient(addr string, client twirp.HTTPClient) CompatService {
	prefix := twirp.URLBase(addr) + CompatServicePathPrefix
	urls := [2]string{
		prefix + "Method",
		prefix + "NoopMethod",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &compatServiceJSONClient{
			client: twirp.WithoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &compatServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *compatServiceJSONClient) Method(ctx context.Context, in *Req) (*Resp, error) {
	out := new(Resp)
	err := twirp.DoJSONRequest(ctx, c.client, c.urls[0], in, out)
	return out, err
}

func (c *compatServiceJSONClient) NoopMethod(ctx context.Context, in *Empty) (*Empty, error) {
	out := new(Empty)
	err := twirp.DoJSONRequest(ctx, c.client, c.urls[1], in, out)
	return out, err
}

// ============================
// CompatService Server Handler
// ============================

type compatServiceServer struct {
	CompatService
	*twirp.ServerHooks
}

func NewCompatServiceServer(svc CompatService, hooks *twirp.ServerHooks) twirp.Server {
	return &compatServiceServer{
		CompatService: svc,
		ServerHooks:   hooks,
	}
}

// CompatServicePathPrefix is used for all URL paths on a twirp CompatService server.
// Requests are always: POST CompatServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const CompatServicePathPrefix = "/twirp/twirp.clientcompat.CompatService/"

func (s *compatServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "twirp.clientcompat")
	ctx = ctxsetters.WithServiceName(ctx, "CompatService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = s.CallRequestReceived(ctx)
	if err != nil {
		s.WriteError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = twirp.BadRouteError(msg, req.Method, req.URL.Path)
		s.WriteError(ctx, resp, err)
		return
	}

	if strings.HasPrefix(req.URL.Path, CompatServicePathPrefix) {
		switch req.URL.Path[len(CompatServicePathPrefix):] {
		case "Method":
			s.serveMethod(ctx, resp, req)
			return
		case "NoopMethod":
			s.serveNoopMethod(ctx, resp, req)
			return
		}
	}
	msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
	err = twirp.BadRouteError(msg, req.Method, req.URL.Path)
	s.WriteError(ctx, resp, err)
	return
}

func (s *compatServiceServer) serveMethod(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	switch req.Header.Get("Content-Type") {
	case "application/json":
		s.serveMethodJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveMethodProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := twirp.BadRouteError(msg, req.Method, req.URL.Path)
		s.WriteError(ctx, resp, twerr)
	}
}

func (s *compatServiceServer) serveMethodJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Method")
	ctx, err = s.CallRequestRouted(ctx)
	if err != nil {
		s.WriteError(ctx, resp, err)
		return
	}

	defer func() {
		if err := req.Body.Close(); err != nil {
			s.Printf("error closing body: %q", err)
		}
	}()
	reqContent := new(Req)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = twirp.WrapErr(err, "failed to parse request json")
		s.WriteError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *Resp
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.WriteError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Method(ctx, reqContent)
	}()

	if err != nil {
		s.WriteError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.WriteError(ctx, resp, twirp.InternalError("received a nil *Resp and nil error while calling Method. nil responses are not supported"))
		return
	}

	ctx = s.CallResponsePrepared(ctx)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = twirp.WrapErr(err, "failed to marshal json response")
		s.WriteError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)
	if _, err = resp.Write(buf.Bytes()); err != nil {
		s.Printf("errored while writing response to client, but already sent response status code to 200: %s", err)
	}
	s.CallResponseSent(ctx)
}

func (s *compatServiceServer) serveMethodProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Method")
	ctx, err = s.CallRequestRouted(ctx)
	if err != nil {
		s.WriteError(ctx, resp, err)
		return
	}

	defer func() {
		if err := req.Body.Close(); err != nil {
			s.Printf("error closing body: %q", err)
		}
	}()
	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = twirp.WrapErr(err, "failed to read request body")
		s.WriteError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(Req)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = twirp.WrapErr(err, "failed to parse request proto")
		s.WriteError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *Resp
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.WriteError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Method(ctx, reqContent)
	}()

	if err != nil {
		s.WriteError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.WriteError(ctx, resp, twirp.InternalError("received a nil *Resp and nil error while calling Method. nil responses are not supported"))
		return
	}

	ctx = s.CallResponsePrepared(ctx)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = twirp.WrapErr(err, "failed to marshal proto response")
		s.WriteError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if _, err = resp.Write(respBytes); err != nil {
		s.Printf("errored while writing response to client, but already sent response status code to 200: %s", err)
	}
	s.CallResponseSent(ctx)
}

func (s *compatServiceServer) serveNoopMethod(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	switch req.Header.Get("Content-Type") {
	case "application/json":
		s.serveNoopMethodJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveNoopMethodProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := twirp.BadRouteError(msg, req.Method, req.URL.Path)
		s.WriteError(ctx, resp, twerr)
	}
}

func (s *compatServiceServer) serveNoopMethodJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "NoopMethod")
	ctx, err = s.CallRequestRouted(ctx)
	if err != nil {
		s.WriteError(ctx, resp, err)
		return
	}

	defer func() {
		if err := req.Body.Close(); err != nil {
			s.Printf("error closing body: %q", err)
		}
	}()
	reqContent := new(Empty)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = twirp.WrapErr(err, "failed to parse request json")
		s.WriteError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *Empty
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.WriteError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.NoopMethod(ctx, reqContent)
	}()

	if err != nil {
		s.WriteError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.WriteError(ctx, resp, twirp.InternalError("received a nil *Empty and nil error while calling NoopMethod. nil responses are not supported"))
		return
	}

	ctx = s.CallResponsePrepared(ctx)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = twirp.WrapErr(err, "failed to marshal json response")
		s.WriteError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)
	if _, err = resp.Write(buf.Bytes()); err != nil {
		s.Printf("errored while writing response to client, but already sent response status code to 200: %s", err)
	}
	s.CallResponseSent(ctx)
}

func (s *compatServiceServer) serveNoopMethodProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "NoopMethod")
	ctx, err = s.CallRequestRouted(ctx)
	if err != nil {
		s.WriteError(ctx, resp, err)
		return
	}

	defer func() {
		if err := req.Body.Close(); err != nil {
			s.Printf("error closing body: %q", err)
		}
	}()
	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = twirp.WrapErr(err, "failed to read request body")
		s.WriteError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = twirp.WrapErr(err, "failed to parse request proto")
		s.WriteError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *Empty
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.WriteError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.NoopMethod(ctx, reqContent)
	}()

	if err != nil {
		s.WriteError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.WriteError(ctx, resp, twirp.InternalError("received a nil *Empty and nil error while calling NoopMethod. nil responses are not supported"))
		return
	}

	ctx = s.CallResponsePrepared(ctx)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = twirp.WrapErr(err, "failed to marshal proto response")
		s.WriteError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if _, err = resp.Write(respBytes); err != nil {
		s.Printf("errored while writing response to client, but already sent response status code to 200: %s", err)
	}
	s.CallResponseSent(ctx)
}

func (s *compatServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 0
}

func (s *compatServiceServer) ProtocGenTwirpVersion() string {
	return "v5.1.0"
}

var twirpFileDescriptor0 = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xc1, 0x4e, 0x83, 0x40,
	0x10, 0x86, 0x5d, 0xdb, 0x52, 0x9d, 0x20, 0x36, 0x83, 0x89, 0xd8, 0x13, 0xe1, 0x22, 0x89, 0x09,
	0x87, 0x7a, 0xec, 0xc9, 0xd6, 0x26, 0x5e, 0x28, 0x66, 0xeb, 0xc9, 0x8b, 0x41, 0x98, 0x28, 0x89,
	0xb8, 0x0b, 0xbb, 0x62, 0x7c, 0x0b, 0x9f, 0xcf, 0xa7, 0x31, 0x02, 0xc6, 0x1a, 0xd7, 0xe3, 0x7c,
	0xff, 0xcc, 0xb7, 0x93, 0x1d, 0xc0, 0xec, 0xa9, 0xa0, 0x67, 0x9d, 0x89, 0x52, 0xa6, 0x3a, 0x92,
	0xb5, 0xd0, 0x02, 0x51, 0xbf, 0x16, 0xb5, 0x8c, 0xb6, 0x93, 0x60, 0x0c, 0xa3, 0x55, 0x29, 0xf5,
	0x5b, 0xe0, 0xc2, 0x80, 0x53, 0x85, 0x36, 0xb0, 0xc6, 0x63, 0x3e, 0x0b, 0xf7, 0x39, 0x6b, 0x82,
	0x23, 0x18, 0x72, 0x52, 0xf2, 0x87, 0x8e, 0xbe, 0xe8, 0x07, 0x03, 0x77, 0xd9, 0x4a, 0x96, 0xad,
	0x24, 0x26, 0xa5, 0xd2, 0x07, 0xc2, 0x53, 0x38, 0x54, 0x54, 0x37, 0x45, 0x46, 0x77, 0x69, 0x9e,
	0xd7, 0xa4, 0x54, 0x6f, 0x72, 0x7a, 0x7c, 0xd1, 0x51, 0xdc, 0x80, 0x55, 0x92, 0x7e, 0x14, 0xb9,
	0xb7, 0xeb, 0xb3, 0xd0, 0x99, 0xcd, 0xa3, 0xbf, 0x9b, 0x45, 0x86, 0x17, 0xa2, 0xae, 0xda, 0x74,
	0xb6, 0xb8, 0x55, 0xf0, 0x5e, 0x85, 0x1e, 0x8c, 0x6b, 0xaa, 0x5e, 0x48, 0x69, 0x6f, 0xe0, 0xb3,
	0xd0, 0xe6, 0xdf, 0x65, 0x70, 0x06, 0xae, 0x61, 0x10, 0xf7, 0x60, 0xb8, 0x4e, 0x92, 0xeb, 0xc9,
	0x0e, 0x02, 0x58, 0xf1, 0xea, 0xe6, 0x2a, 0xb9, 0x9c, 0xb0, 0xd9, 0x3b, 0x83, 0x83, 0x5f, 0xdd,
	0x38, 0x07, 0xab, 0x9f, 0x38, 0x36, 0xed, 0xc9, 0xa9, 0x9a, 0x7a, 0xe6, 0x40, 0x49, 0x5c, 0x00,
	0xac, 0x85, 0x90, 0xbd, 0xe0, 0xc4, 0xd4, 0xd7, 0xfe, 0xff, 0xf4, 0xff, 0x68, 0xe1, 0xdc, 0xda,
	0xdb, 0xf4, 0xde, 0x6a, 0xcf, 0x79, 0xfe, 0x19, 0x00, 0x00, 0xff, 0xff, 0x16, 0xee, 0xa9, 0xa1,
	0xe4, 0x01, 0x00, 0x00,
}
