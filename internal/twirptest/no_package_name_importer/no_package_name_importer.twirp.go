// Code generated by protoc-gen-twirp v5.1.0, DO NOT EDIT.
// source: no_package_name_importer.proto

/*
Package no_package_name_importer is a generated twirp stub package.
This code was generated with github.com/twitchtv/twirp/protoc-gen-twirp v5.1.0.

It is generated from these files:
	no_package_name_importer.proto
*/
package no_package_name_importer

import bytes "bytes"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"
import strings "strings"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

import no_package_name "github.com/twitchtv/twirp/internal/twirptest/no_package_name"

// ==============
// Svc2 Interface
// ==============

type Svc2 interface {
	Method(context.Context, *no_package_name.Msg) (*no_package_name.Msg, error)
}

// ====================
// Svc2 Protobuf Client
// ====================

type svc2ProtobufClient struct {
	client twirp.HTTPClient
	urls   [1]string
}

// NewSvc2ProtobufClient creates a Protobuf client that implements the Svc2 interface.
// It communicates using Protobuf and can be configured with a custom twirp.HTTPClient.
func NewSvc2ProtobufClient(addr string, client twirp.HTTPClient) Svc2 {
	prefix := twirp.URLBase(addr) + Svc2PathPrefix
	urls := [1]string{
		prefix + "Method",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &svc2ProtobufClient{
			client: twirp.WithoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &svc2ProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *svc2ProtobufClient) Method(ctx context.Context, in *no_package_name.Msg) (*no_package_name.Msg, error) {
	out := new(no_package_name.Msg)
	err := twirp.DoProtobufRequest(ctx, c.client, c.urls[0], in, out)
	return out, err
}

// ================
// Svc2 JSON Client
// ================

type svc2JSONClient struct {
	client twirp.HTTPClient
	urls   [1]string
}

// NewSvc2JSONClient creates a JSON client that implements the Svc2 interface.
// It communicates using JSON and can be configured with a custom twirp.HTTPClient.
func NewSvc2JSONClient(addr string, client twirp.HTTPClient) Svc2 {
	prefix := twirp.URLBase(addr) + Svc2PathPrefix
	urls := [1]string{
		prefix + "Method",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &svc2JSONClient{
			client: twirp.WithoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &svc2JSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *svc2JSONClient) Method(ctx context.Context, in *no_package_name.Msg) (*no_package_name.Msg, error) {
	out := new(no_package_name.Msg)
	err := twirp.DoJSONRequest(ctx, c.client, c.urls[0], in, out)
	return out, err
}

// ===================
// Svc2 Server Handler
// ===================

type svc2Server struct {
	Svc2
	*twirp.ServerHooks
}

func NewSvc2Server(svc Svc2, hooks *twirp.ServerHooks) twirp.Server {
	return &svc2Server{
		Svc2:        svc,
		ServerHooks: hooks,
	}
}

// Svc2PathPrefix is used for all URL paths on a twirp Svc2 server.
// Requests are always: POST Svc2PathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const Svc2PathPrefix = "/twirp/Svc2/"

func (s *svc2Server) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "")
	ctx = ctxsetters.WithServiceName(ctx, "Svc2")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = s.CallRequestReceived(ctx)
	if err != nil {
		s.WriteError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = twirp.BadRouteError(msg, req.Method, req.URL.Path)
		s.WriteError(ctx, resp, err)
		return
	}

	if strings.HasPrefix(req.URL.Path, Svc2PathPrefix) {
		switch req.URL.Path[len(Svc2PathPrefix):] {
		case "Method":
			s.serveMethod(ctx, resp, req)
			return
		}
	}
	msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
	err = twirp.BadRouteError(msg, req.Method, req.URL.Path)
	s.WriteError(ctx, resp, err)
	return
}

func (s *svc2Server) serveMethod(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	switch req.Header.Get("Content-Type") {
	case "application/json":
		s.serveMethodJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveMethodProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := twirp.BadRouteError(msg, req.Method, req.URL.Path)
		s.WriteError(ctx, resp, twerr)
	}
}

func (s *svc2Server) serveMethodJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Method")
	ctx, err = s.CallRequestRouted(ctx)
	if err != nil {
		s.WriteError(ctx, resp, err)
		return
	}

	defer func() {
		if err := req.Body.Close(); err != nil {
			s.Printf("error closing body: %q", err)
		}
	}()
	reqContent := new(no_package_name.Msg)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = twirp.WrapErr(err, "failed to parse request json")
		s.WriteError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *no_package_name.Msg
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.WriteError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Method(ctx, reqContent)
	}()

	if err != nil {
		s.WriteError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.WriteError(ctx, resp, twirp.InternalError("received a nil *no_package_name.Msg and nil error while calling Method. nil responses are not supported"))
		return
	}

	ctx = s.CallResponsePrepared(ctx)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = twirp.WrapErr(err, "failed to marshal json response")
		s.WriteError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)
	if _, err = resp.Write(buf.Bytes()); err != nil {
		s.Printf("errored while writing response to client, but already sent response status code to 200: %s", err)
	}
	s.CallResponseSent(ctx)
}

func (s *svc2Server) serveMethodProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Method")
	ctx, err = s.CallRequestRouted(ctx)
	if err != nil {
		s.WriteError(ctx, resp, err)
		return
	}

	defer func() {
		if err := req.Body.Close(); err != nil {
			s.Printf("error closing body: %q", err)
		}
	}()
	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = twirp.WrapErr(err, "failed to read request body")
		s.WriteError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(no_package_name.Msg)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = twirp.WrapErr(err, "failed to parse request proto")
		s.WriteError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *no_package_name.Msg
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.WriteError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Method(ctx, reqContent)
	}()

	if err != nil {
		s.WriteError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.WriteError(ctx, resp, twirp.InternalError("received a nil *no_package_name.Msg and nil error while calling Method. nil responses are not supported"))
		return
	}

	ctx = s.CallResponsePrepared(ctx)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = twirp.WrapErr(err, "failed to marshal proto response")
		s.WriteError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if _, err = resp.Write(respBytes); err != nil {
		s.Printf("errored while writing response to client, but already sent response status code to 200: %s", err)
	}
	s.CallResponseSent(ctx)
}

func (s *svc2Server) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 0
}

func (s *svc2Server) ProtocGenTwirpVersion() string {
	return "v5.1.0"
}

var twirpFileDescriptor0 = []byte{
	// 141 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xcb, 0xcb, 0x8f, 0x2f,
	0x48, 0x4c, 0xce, 0x4e, 0x4c, 0x4f, 0x8d, 0xcf, 0x4b, 0xcc, 0x4d, 0x8d, 0xcf, 0xcc, 0x2d, 0xc8,
	0x2f, 0x2a, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x97, 0x0a, 0x4a, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x2f, 0x29, 0xcf, 0x2c, 0x49, 0xce, 0x28, 0x29, 0x03,
	0x31, 0x8a, 0x0a, 0xf4, 0x33, 0xf3, 0x4a, 0x52, 0x8b, 0xf2, 0x12, 0x73, 0x20, 0xdc, 0x92, 0xd4,
	0xe2, 0x12, 0x7d, 0x34, 0xc3, 0xd0, 0xf9, 0x10, 0x33, 0x8d, 0x64, 0xb8, 0x58, 0x82, 0xcb, 0x92,
	0x8d, 0x84, 0x44, 0xb8, 0xd8, 0x7c, 0x53, 0x4b, 0x32, 0xf2, 0x53, 0x84, 0x58, 0xf4, 0x7c, 0x8b,
	0xd3, 0xa5, 0xc0, 0xa4, 0x93, 0x54, 0x94, 0x04, 0x2e, 0x37, 0x25, 0xb1, 0x81, 0x0d, 0x30, 0x06,
	0x04, 0x00, 0x00, 0xff, 0xff, 0xe3, 0xa5, 0xee, 0x0b, 0xb6, 0x00, 0x00, 0x00,
}
